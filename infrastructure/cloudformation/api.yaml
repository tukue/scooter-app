AWSTemplateFormatVersion: '2010-09-09'
Description: 'API Gateway Stack for Scooter App with Cognito Integration for Web and Mobile'

Parameters:
  EnvironmentName:
    Type: String
    Description: 'Environment name (e.g., dev, staging, prod)'
  GetUserProfileFunctionArn:
    Type: String
    Description: 'ARN of the GetUserProfile Lambda function'
  SearchScootersFunctionArn:
    Type: String
    Description: 'ARN of the SearchScooters Lambda function'
  StartTripFunctionArn:
    Type: String
    Description: 'ARN of the StartTrip Lambda function'
  EndTripFunctionArn:
    Type: String
    Description: 'ARN of the EndTrip Lambda function'
  GetLeaderboardFunctionArn:
    Type: String
    Description: 'ARN of the GetLeaderboard Lambda function'

Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub '${EnvironmentName}-ScooterAppUserPool'
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      MfaConfiguration: 'OFF'
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true

  CognitoUserPoolClientWeb:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub '${EnvironmentName}-ScooterAppWebClient'
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED
      SupportedIdentityProviders:
        - COGNITO

  CognitoUserPoolClientMobile:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub '${EnvironmentName}-ScooterAppMobileClient'
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: true
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_CUSTOM_AUTH
      PreventUserExistenceErrors: ENABLED
      SupportedIdentityProviders:
        - COGNITO

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub '${EnvironmentName}-scooterapp-${AWS::AccountId}'
      UserPoolId: !Ref CognitoUserPool

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${EnvironmentName}-ScooterAppAPI'
      Description: 'API for Scooter App'

  ApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoAuthorizer
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref ApiGateway
      ProviderARNs:
        - !GetAtt CognitoUserPool.Arn

  UserProfileResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'user-profile'

  UserProfileMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref UserProfileResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUserProfileFunctionArn}/invocations'

  SearchResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'search'

  SearchMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref SearchResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchScootersFunctionArn}/invocations'

  StartTripResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'start-trip'

  StartTripMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref StartTripResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StartTripFunctionArn}/invocations'

  EndTripResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'end-trip'

  EndTripMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref EndTripResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EndTripFunctionArn}/invocations'

  LeaderboardResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'leaderboard'

  LeaderboardMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref LeaderboardResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetLeaderboardFunctionArn}/invocations'

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - UserProfileMethod
      - SearchMethod
      - StartTripMethod
      - EndTripMethod
      - LeaderboardMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref EnvironmentName

Outputs:
  ApiUrl:
    Description: 'API Gateway URL'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentName}'
    Export:
      Name: !Sub '${EnvironmentName}-ApiUrl'

  UserPoolId:
    Description: 'Cognito User Pool ID'
    Value: !Ref CognitoUserPool
    Export:
      Name: !Sub '${EnvironmentName}-UserPoolId'

  UserPoolWebClientId:
    Description: 'Cognito User Pool Web Client ID'
    Value: !Ref CognitoUserPoolClientWeb
    Export:
      Name: !Sub '${EnvironmentName}-UserPoolWebClientId'

  UserPoolMobileClientId:
    Description: 'Cognito User Pool Mobile Client ID'
    Value: !Ref CognitoUserPoolClientMobile
    Export:
      Name: !Sub '${EnvironmentName}-UserPoolMobileClientId'

  CognitoDomain:
    Description: 'Cognito Domain'
    Value: !Sub '${EnvironmentName}-scooterapp-${AWS::AccountId}.auth.${AWS::Region}.amazoncognito.com'
    Export:
      Name: !Sub '${EnvironmentName}-CognitoDomain'
